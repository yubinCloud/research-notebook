import{_ as c,r as i,o as d,c as u,a as e,b as s,d as n,w as l,e as o}from"./app-s5JIphqh.js";const m={},p={href:"https://proceedings.neurips.cc/paper_files/paper/2023/hash/72223cc66f63ca1aa59edaec1b3670e6-Abstract-Conference.html",target:"_blank",rel:"noopener noreferrer"},h=e("p",null,"⭐⭐⭐⭐",-1),_=e("p",null,"NeurIPS 2023, arXiv:2304.11015",-1),g={href:"https://github.com/MohammadrezaPourreza/Few-shot-NL2SQL-with-prompting",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"一、论文速读",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一、论文速读"},[e("span",null,"一、论文速读")])],-1),L=e("p",null,"生成 SQL 被分成四个阶段：",-1),v=e("ol",null,[e("li",null,[e("strong",null,"Schema Linking"),s("：输入 NL query 和 DB schema，找出与 query 相关的 tables、columns 以及不同表之间的外键关系")]),e("li",null,[e("strong",null,"Classification & Decomposition"),s("：将 query 分成了三种不同的难度：EASY、NON-NESTED、NESTED")]),e("li",null,[e("strong",null,"SQL Generation"),s("：根据不同类型的 query，按照不同的策略来生成对应的 SQL")]),e("li",null,[e("strong",null,"Self-correction"),s("：通过 prompt 来让 LLM 检查和纠正可能错误的 SQL")])],-1),S=e("img",{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20240531171906.png",alt:"20240531171906",style:{zoom:"75%"}},null,-1),k=e("h3",{id:"_1-1-schema-linking-module",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-1-schema-linking-module"},[e("span",null,"1.1 Schema Linking Module")])],-1),f=e("p",null,"这个 module 输入 NL query 和 DB 的 schema 信息，输出的是将 query 链接到 DB 中的一些信息，具体来说输出就是：",-1),y=e("ol",null,[e("li",null,"table 和 columns 的名称：找到 query 中涉及到的 DB 的 table 和 columns 的名称"),e("li",null,"条件值：从查询中提取出用于条件过滤的值，比如在查询“Find the departments with a budget greater than 500”中，需要提取出条件值“500”。"),e("li",null,"外键关系的确定：如果查询涉及到多个表，需要确定它们之间的关系，如通过外键连接。")],-1),T=e("p",null,"下面是使用 in-context learning + CoT 来让 LLM 做 schema-linking 的示例：",-1),q=e("img",{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/1717147500308.png",alt:"1717147500308",style:{zoom:"75%"}},null,-1),N=e("p",null,"demostration 的一个示例如下：",-1),E=e("div",{class:"language-plain line-numbers-mode","data-ext":"plain","data-title":"plain"},[e("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code","v-pre":""},[e("code",null,[e("span",{class:"line"},[e("span",null,"Table advisor, columns = [*,s_ID,i_ID]")]),s(`
`),e("span",{class:"line"},[e("span",null,"Table classroom, columns = [*,building,room_number,capacity]")]),s(`
`),e("span",{class:"line"},[e("span",null,"Table course, columns = [*,course_id,title,dept_name,credits]")]),s(`
`),e("span",{class:"line"},[e("span",null,"Table department, columns = [*,dept_name,building,budget]")]),s(`
`),e("span",{class:"line"},[e("span",null,"Table instructor, columns = [*,ID,name,dept_name,salary]")]),s(`
`),e("span",{class:"line"},[e("span",null,"Table prereq, columns = [*,course_id,prereq_id]")]),s(`
`),e("span",{class:"line"},[e("span",null,"Table section, columns = [*,course_id,sec_id,semester,year,building,room_number,time_slot_id]")]),s(`
`),e("span",{class:"line"},[e("span",null,"Table student, columns = [*,ID,name,dept_name,tot_cred]")]),s(`
`),e("span",{class:"line"},[e("span",null,"Table takes, columns = [*,ID,course_id,sec_id,semester,year,grade]")]),s(`
`),e("span",{class:"line"},[e("span",null,"Table teaches, columns = [*,ID,course_id,sec_id,semester,year]")]),s(`
`),e("span",{class:"line"},[e("span",null,"Table time_slot, columns = [*,time_slot_id,day,start_hr,start_min,end_hr,end_min]")]),s(`
`),e("span",{class:"line"},[e("span",null,"Foreign_keys = [course.dept_name = department.dept_name,instructor.dept_name = department.dept_name,section.building = classroom.building,section.room_number = classroom.room_number,section.course_id = course.course_id,teaches.ID = instructor.ID,teaches.course_id = section.course_id,teaches.sec_id = section.sec_id,teaches.semester = section.semester,teaches.year = section.year,student.dept_name = department.dept_name,takes.ID = student.ID,takes.course_id = section.course_id,takes.sec_id = section.sec_id,takes.semester = section.semester,takes.year = section.year,advisor.s_ID = student.ID,advisor.i_ID = instructor.ID,prereq.prereq_id = course.course_id,prereq.course_id = course.course_id]")]),s(`
`),e("span",{class:"line"},[e("span",null,'Q: "Find the buildings which have rooms with capacity more than 50."')]),s(`
`),e("span",{class:"line"},[e("span",null,'A: Let’s think step by step. In the question "Find the buildings which have rooms with capacity more than 50.", we are asked:')]),s(`
`),e("span",{class:"line"},[e("span",null,'"the buildings which have rooms" so we need column = [classroom.capacity]')]),s(`
`),e("span",{class:"line"},[e("span",null,'"rooms with capacity" so we need column = [classroom.building]')]),s(`
`),e("span",{class:"line"},[e("span",null,"Based on the columns and tables, we need these Foreign_keys = [].")]),s(`
`),e("span",{class:"line"},[e("span",null,"Based on the tables, columns, and Foreign_keys, The set of possible cell values are = [50]. So the Schema_links are:")]),s(`
`),e("span",{class:"line"},[e("span",null,"Schema_links: [classroom.building,classroom.capacity,50]")])])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),Q=e("p",null,[s("如下面代码所示，schema linking 的结果就是从 GPT 的响应中解析出 "),e("code",null,"Schema_links:"),s(" 这个字符串后面的内容：")],-1),x=e("img",{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20240531173805.png",alt:"20240531173805",style:{zoom:"75%"}},null,-1),w=o('<h3 id="_1-2-classification-decomposition-module" tabindex="-1"><a class="header-anchor" href="#_1-2-classification-decomposition-module"><span>1.2 Classification &amp; Decomposition Module</span></a></h3><p>这一步将 query 分成三种不同的复杂度的类：</p><ul><li><strong>EASY</strong>：没有 JOIN 和 NESTING 的单表查询</li><li><strong>NON-NESTED</strong>：需要 JOIN 但不需要子查询的查询</li><li><strong>NESTED</strong>：可以包含 JOIN、sub-query 和 set opr</li></ul><p>下面是一个该 module 的示例：</p>',4),I=e("img",{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/1717150768897.png",alt:"1717150768897",style:{zoom:"75%"}},null,-1),D=e("p",null,"这部分代码如下：",-1),M=e("img",{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/1717151043226.png",alt:"1717151043226",style:{zoom:"75%"}},null,-1),F=e("h3",{id:"_1-3-sql-generation-module",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-3-sql-generation-module"},[e("span",null,"1.3 SQL Generation Module")])],-1),O=e("p",null,"这一个 module 根据 query 的复杂度类型，使用不同的策略来生成 SQL。",-1),C=e("h4",{id:"_1-3-1-easy-类型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-3-1-easy-类型"},[e("span",null,"1.3.1 EASY 类型")])],-1),A=e("p",null,"对于 EASY 类型的 question，不需要中间步骤，只需要少量提示就足够了，下面是一个 exemplar：",-1),B=e("div",{class:"language-plain line-numbers-mode","data-ext":"plain","data-title":"plain"},[e("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code","v-pre":""},[e("code",null,[e("span",{class:"line"},[e("span",null,'Q: "Find the buildings which have rooms with capacity more than 50."')]),s(`
`),e("span",{class:"line"},[e("span",null,"Schema_links: [classroom.building,classroom.capacity,50]")]),s(`
`),e("span",{class:"line"},[e("span",null,"SQL: SELECT DISTINCT building FROM classroom WHERE capacity  >  50")])])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),G=e("p",null,"即要求 LLM 根据 question 和 schema links 输出 SQL。",-1),P=e("h4",{id:"_1-3-2-non-nested-类型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-3-2-non-nested-类型"},[e("span",null,"1.3.2 NON-NESTED 类型")])],-1),R=e("p",null,"对于 NON-NESTED 类型的 question，启发 LLM 去思考从而生成 SQL，下面是一个 exemplar：",-1),z=e("div",{class:"language-plain line-numbers-mode","data-ext":"plain","data-title":"plain"},[e("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code","v-pre":""},[e("code",null,[e("span",{class:"line"},[e("span",null,'Q: "Find the total budgets of the Marketing or Finance department."')]),s(`
`),e("span",{class:"line"},[e("span",null,"Schema_links: [department.budget,department.dept_name,Marketing,Finance]")]),s(`
`),e("span",{class:"line"},[e("span",null,"A: Let’s think step by step. For creating the SQL for the given question, we need to join these tables = []. First, create an intermediate representation, then use it to construct the SQL query.")]),s(`
`),e("span",{class:"line"},[e("span",null,'Intermediate_representation: select sum(department.budget) from department  where  department.dept_name = \\"Marketing\\"  or  department.dept_name = \\"Finance\\"')]),s(`
`),e("span",{class:"line"},[e("span",null,"SQL: SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'")])])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),j=e("p",null,[s("也就是输入 question 和 schema links，然后加一句 "),e("code",null,"Let's think step by step"),s(" 启发 LLM 思考，从而得到 SQL。")],-1),Y=e("h4",{id:"_1-3-3-nested-类型",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-3-3-nested-类型"},[e("span",null,"1.3.3 NESTED 类型")])],-1),J=e("p",null,"在 “Classification & Decomposition Module” 模块中，除了为其复杂度分类，还会为 NESTED 类型的 user question 生成 sub-question，如下图：",-1),V=e("img",{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/1717161202440.png",alt:"1717161202440",style:{zoom:"75%"}},null,-1),H=e("p",null,"然后，这里的 sub-questions 会被传入 SQL Generation Module 的 prompt 中用于解决 NESTED 类型的 SQL 生成。下面是一个 exemplar：",-1),W=e("div",{class:"language-plain line-numbers-mode","data-ext":"plain","data-title":"plain"},[e("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code","v-pre":""},[e("code",null,[e("span",{class:"line"},[e("span",null,'Q: "Find the title of courses that have two prerequisites?"')]),s(`
`),e("span",{class:"line"},[e("span",null,"Schema_links: [course.title,course.course_id = prereq.course_id]")]),s(`
`),e("span",{class:"line"},[e("span",null,`A: Let's think step by step. "Find the title of courses that have two prerequisites?" can be solved by knowing the answer to the following sub-question "What are the titles for courses with two prerequisites?".`)]),s(`
`),e("span",{class:"line"},[e("span",null,'The SQL query for the sub-question "What are the titles for courses with two prerequisites?" is SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2')]),s(`
`),e("span",{class:"line"},[e("span",null,'So, the answer to the question "Find the title of courses that have two prerequisites?" is =')]),s(`
`),e("span",{class:"line"},[e("span",null,"Intermediate_representation: select course.title from course  where  count ( prereq.* )  = 2  group by prereq.course_id")]),s(`
`),e("span",{class:"line"},[e("span",null,"SQL: SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2")])])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"}),e("div",{class:"line-number"})])],-1),U=e("p",null,"exemplar 的 prompt 的组成如下：",-1),X=e("img",{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/1717161441480.png",alt:"1717161441480",style:{zoom:"75%"}},null,-1),K=e("p",null,"可以看到，这就是输入 question、sub-questions、schema links 来生成 SQL。",-1),Z=e("h3",{id:"_1-4-self-correction-module",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-4-self-correction-module"},[e("span",null,"1.4 Self-correction Module")])],-1),$=e("p",null,"这一模块的目的是通过 prompt 让 LLM 来检查和纠正生成的 SQL 中可能的错误。这里的 prompt 如下：",-1),ee=e("img",{src:"https://notebook-img-1304596351.cos.ap-beijing.myqcloud.com/img/20240531212214.png",alt:"20240531212214",style:{zoom:"75%"}},null,-1),se=o('<p>这里的 prompt 让 LLM 多关注自己在生成 SQL 时容易犯的错。</p><h2 id="二、error-cases-分析" tabindex="-1"><a class="header-anchor" href="#二、error-cases-分析"><span>二、Error cases 分析</span></a></h2><p>论文对 error cases 做了分析，总结了如下 LLM 容易出的错：</p><ul><li><strong>Schema linking</strong>：这类是犯错最多的情况，指的是 model 错误地识别出 question 中提到的 column names、table names 或者 entities。</li><li><strong>JOIN</strong>：第二大类情况，指的是 model 不能识别出所有需要的 tables 以及正确地将这些 tables 连接起来的外键。</li><li><strong>GROUP BY</strong>：在生成 GROUP BY 子句时，可能会遗漏或者选错列</li><li><strong>Queries with nesting and set operations</strong>：模型不能识别出 nested structure 或者不能检测出正确的 nesting 或 set 操作</li><li><strong>Invalid SQL</strong>：一部分 SQL 有语法错误且不能执行</li><li><strong>Miscellaneous</strong>：还有其他乱七八糟的原因，比如缺少 predicate、缺少或冗余 DISTINCT、DESC 等关键字</li></ul><p>这些容易犯的错，都会在 self-correction module 被多关注来检查和纠正。</p><h2 id="三、总结" tabindex="-1"><a class="header-anchor" href="#三、总结"><span>三、总结</span></a></h2><p>本论文设计的 prompt 以及思路让 LLM 在解决 Text2SQL 任务上有了不错的表现，产生了与最先进的微调方法相当甚至更优的结果。</p><p>但是，本文的思路需要多轮与 LLM 交互，从而产生了巨大的花费和延迟，论文给出，在使用 GPT4 响应 Spider 数据集中 question 时表现出大约 60s 的延迟。</p>',8);function ne(le,te){const a=i("ExternalLinkIcon"),r=i("font"),t=i("center");return d(),u("div",null,[e("blockquote",null,[e("p",null,[s("论文："),e("a",p,[s("DIN-SQL: Decomposed In-Context Learning of Text-to-SQL with Self-Correction"),n(a)])]),h,_,e("p",null,[s("Code: "),e("a",g,[s("Few-shot-NL2SQL-with-prompting | GitHub"),n(a)])])]),b,n(r,{color:"blue"},{default:l(()=>[s("这篇论文通过对 LLM 做 prompt 来实现 Text2SQL，过程中通过 prompt 让 LLM 分解任务来降低难度，每个子任务通过 in-context learning 让 LLM 来完成，并在完成 SQL 生成后，通过 self-correction 来检查和纠正可能有错误的 SQL")]),_:1}),s("。最终，在执行精确度指标上超越了现有的 SOTA 模型。"),L,v,n(t,null,{default:l(()=>[S]),_:1}),k,f,y,T,n(t,null,{default:l(()=>[q]),_:1}),N,E,Q,n(t,null,{default:l(()=>[x]),_:1}),w,n(t,null,{default:l(()=>[I]),_:1}),D,n(t,null,{default:l(()=>[M]),_:1}),F,O,C,A,B,G,P,R,z,j,Y,J,n(t,null,{default:l(()=>[V]),_:1}),H,W,U,n(t,null,{default:l(()=>[X]),_:1}),K,Z,$,n(t,null,{default:l(()=>[ee]),_:1}),se])}const ae=c(m,[["render",ne],["__file","index.html.vue"]]),oe=JSON.parse(`{"path":"/arxiv/2304.11015/","title":"🌙 DIN-SQL：分解任务 + 自我纠正 + in-context 让 LLM 完成 Text2SQL","lang":"zh-CN","frontmatter":{"title":"🌙 DIN-SQL：分解任务 + 自我纠正 + in-context 让 LLM 完成 Text2SQL","author":"Bin Yu","createTime":"2024/05/31 15:58:00","permalink":"/arxiv/2304.11015/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"一、论文速读","slug":"一、论文速读","link":"#一、论文速读","children":[{"level":3,"title":"1.1 Schema Linking Module","slug":"_1-1-schema-linking-module","link":"#_1-1-schema-linking-module","children":[]},{"level":3,"title":"1.2 Classification & Decomposition Module","slug":"_1-2-classification-decomposition-module","link":"#_1-2-classification-decomposition-module","children":[]},{"level":3,"title":"1.3 SQL Generation Module","slug":"_1-3-sql-generation-module","link":"#_1-3-sql-generation-module","children":[]},{"level":3,"title":"1.4 Self-correction Module","slug":"_1-4-self-correction-module","link":"#_1-4-self-correction-module","children":[]}]},{"level":2,"title":"二、Error cases 分析","slug":"二、error-cases-分析","link":"#二、error-cases-分析","children":[]},{"level":2,"title":"三、总结","slug":"三、总结","link":"#三、总结","children":[]}],"readingTime":{"minutes":5.73,"words":1719},"git":{"updatedTime":1717830098000,"contributors":[{"name":"yubinCloud","email":"yubin_SkyWalker@yeah.net","commits":3}]},"filePathRelative":"notes/Text2SQL/2304.DIN-SQL.md","categoryList":[{"type":10000,"name":"notes"},{"type":10004,"name":"Text2SQL"}]}`);export{ae as comp,oe as data};
